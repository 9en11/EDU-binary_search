//naveen mall
#include<bits/stdc++.h>
using namespace std;
#define fast ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define pb               push_back
#define sz(c)            (int)c.size()
#define len(c)           (int)c.length()
#define vec              vector
#define int              long long int
#define all(c)           c.begin(), c.end()
#define rall(c)          c.rbegin(), c.rend()
#define trav(a,i)        for(auto i: a)
#define rep(i, begin, end) for (__typeof(end) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
#define invect(v,n)       for(int i=0;i<n;i++ ){int arb;cin>>arb;v.pb(arb);}
#define inset(s,n)        rep(i,0,n){int aset;cin>>aset;s.insert(aset);}
#define display(c)        trav(c,i) cout<<i<<" ";cout<<"\n";
#define F                 first
#define S                 second
#define pii               pair<int,int>
#define PB                pop_back
#define endl              "\n"
#define what(x) cerr <<  #x << " is " << x << endl;
int sum() { return 0; }template<typename T,typename... Args>T sum(T a, Args... args) { return a + sum(args...); }
#define kyra   1000000007
#define N 300003
const long long INF=1e18;
int n;
int x[N];
int v[N];

bool good(double m)
 { double mi=INF;
   double ma=-INF;
  rep(i,0,n)
    {
       ma=max(ma,x[i]-m*v[i]);
       mi=min(mi, x[i]+m*v[i]);
    }
    return (ma<=mi);

 }


void solve()
{ 
  cin>>n;
  rep(i,0,n)
     {
      cin>>x[i]>>v[i];
     }
double l=-1;
double r=1e15;
rep(i,0,100)
  {
    double m=(l+r)/2;
    if(good(m))
        r=m;
      else
         l=m;
  }
  cout<<setprecision(7)<<r<<endl;

  
}

signed main()
{fast
  
   #ifdef NCR
        init();
   #endif
  
   int t=1;
   //cin>>t;
   
   while(t--)
     {
      solve();
     }
}
